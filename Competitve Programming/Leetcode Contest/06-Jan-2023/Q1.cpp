
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;



class Solution {
public:
int missingInteger(vector<int>& nums) {
  int prefixSum = nums[0], longestPrefixLen = 1;
  int maxNum = nums[0]; // Track the highest number seen

  for (int i = 1; i < nums.size(); ++i) {
    if (nums[i] == prefixSum + 1) {
      longestPrefixLen++;
      prefixSum += nums[i];
    } else {
      longestPrefixLen = 1;
      prefixSum = nums[i];
    }
    maxNum = max(maxNum, nums[i]); // Update maxNum to track the highest seen number
  }

  // Check if the end of the array breaks the current prefix
  if (longestPrefixLen < nums.size() && prefixSum + 1 <= maxNum) {
    return prefixSum + 1;
  }

  // Otherwise, return the smallest missing number based on the longest prefix sum
  return prefixSum + nums.size() - longestPrefixLen + 1;
}
};


int main() {
	
	Solution leetcode2IDE;
	vector<int> nums1 = {1,2,3,2,5};
	int output_1 = 6;
	if(leetcode2IDE.missingInteger(nums1)==output_1){
		cout << "Sample #1 : Accepted" << endl;
	}else{
		cout << "Sample #1 : Wrong Answer" << endl;
	}

	vector<int> nums2 = {3,4,5,1,12,14,13};
	int output_2 = 15;
	if(leetcode2IDE.missingInteger(nums2)==output_2){
		cout << "Sample #2 : Accepted" << endl;
	}else{
		cout << "Sample #2 : Wrong Answer" << endl;
	}

	


	return 0;
}
	